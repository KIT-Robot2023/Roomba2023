#pragma once
#include <chrono>
#include <vector>

#include "roomba_command.hpp"
#include "util.hpp"

namespace diff2_odometry {
struct Diff2OdometryConfig {
    Diff2OdometryConfig(const int encoder_count_per_revolution, const int encoder_count_range,
                        const double wheel_radius, const double wheel_tread)
        : encoder_count_per_revolution(encoder_count_per_revolution),
          encoder_count_range(encoder_count_range),
          wheel_radius(wheel_radius),
          wheel_tread(wheel_tread){};
    const int encoder_count_per_revolution;
    const int encoder_count_range;
    const double wheel_radius;
    const double wheel_tread;
};

struct Diff2OdometryState {
    Diff2OdometryState() : x(0), y(0), theta(0), v(0), w(0){};
    double x;
    double y;
    double theta;
    double v;
    double w;
};

class Diff2Odometry {
public:
    Diff2Odometry(roomba::Command &command, Diff2OdometryConfig &config)
        : command_(command), config_(config), init_flag_(true) {
        prev_left_count_ = 0;
        prev_right_count_ = 0;
    };
    void cycle();
    const Diff2OdometryState &state() const { return state_; };
    double x() { return state_.x; };
    double y() { return state_.y; };
    double theta() { return state_.theta; }
    double v() { return state_.v; };
    double w() { return state_.w; };
    int encoder_left() { return current_left_count_; };
    int encoder_right() { return current_right_count_; };

private:
    roomba::Command &command_;
    const Diff2OdometryConfig &config_;

    bool init_flag_;
    std::chrono::steady_clock::time_point prev_time_;
    Diff2OdometryState prev_state_;
    Diff2OdometryState state_;
    int current_left_count_;
    int current_right_count_;
    int prev_left_count_;
    int prev_right_count_;

    double count_to_rad_(const double count) {
        return count * (2.0 * util::pi_d / config_.encoder_count_per_revolution);
    };
    double omega_to_vel_(const double omega) { return omega * config_.wheel_radius; };
    int delta_count_(int dt_count) {
        if (abs(dt_count) >= config_.encoder_count_range / 2) {
            return util::sign(dt_count) * config_.encoder_count_range - dt_count;
        } else {
            return dt_count;
        }
    };
};

class VertialDiff2Odometry {
public:
    VertialDiff2Odometry(Diff2OdometryConfig &config)
        : config_(config),
          init_flag_(true),
          vertial_encoder_left_(
              {4362,  4363,  4363,  4363,  4363,  4363,  4363,  4363,  4363,  4363,  4363,  4363,  4363,  4363,  4363,
               4363,  4363,  4363,  4363,  4363,  4363,  4363,  4363,  4363,  4363,  4363,  4363,  4363,  4363,  4363,
               4363,  4371,  4386,  4407,  4429,  4458,  4479,  4500,  4521,  4542,  4570,  4591,  4612,  4633,  4653,
               4681,  4702,  4723,  4744,  4765,  4793,  4815,  4836,  4856,  4878,  4905,  4927,  4948,  4968,  4990,
               5017,  5038,  5059,  5081,  5102,  5130,  5151,  5172,  5193,  5213,  5241,  5263,  5284,  5304,  5325,
               5354,  5374,  5396,  5417,  5438,  5465,  5487,  5508,  5529,  5550,  5578,  5599,  5619,  5648,  5669,
               5689,  5711,  5732,  5760,  5781,  5801,  5823,  5844,  5872,  5893,  5914,  5934,  5955,  5984,  6005,
               6026,  6046,  6075,  6096,  6117,  6137,  6158,  6186,  6208,  6229,  6250,  6271,  6298,  6319,  6341,
               6361,  6383,  6410,  6431,  6453,  6474,  6495,  6523,  6544,  6565,  6593,  6614,  6635,  6656,  6684,
               6705,  6726,  6747,  6768,  6796,  6817,  6838,  6866,  6887,  6908,  6929,  6950,  6978,  7000,  7020,
               7041,  7062,  7090,  7111,  7132,  7153,  7174,  7202,  7224,  7244,  7265,  7294,  7314,  7336,  7363,
               7384,  7405,  7426,  7447,  7475,  7496,  7517,  7538,  7559,  7587,  7608,  7629,  7650,  7671,  7699,
               7720,  7741,  7762,  7783,  7811,  7832,  7853,  7873,  7882,  7873,  7856,  7835,  7812,  7783,  7762,
               7741,  7720,  7699,  7671,  7650,  7628,  7607,  7587,  7559,  7538,  7517,  7507,  7516,  7536,  7558,
               7579,  7607,  7628,  7649,  7670,  7698,  7719,  7740,  7761,  7782,  7810,  7831,  7852,  7874,  7894,
               7922,  7943,  7964,  7992,  8013,  8035,  8056,  8077,  8105,  8126,  8147,  8168,  8188,  8217,  8238,
               8259,  8280,  8308,  8328,  8349,  8370,  8399,  8420,  8441,  8462,  8489,  8510,  8532,  8553,  8574,
               8602,  8623,  8644,  8665,  8686,  8714,  8735,  8756,  8776,  8798,  8826,  8847,  8867,  8888,  8916,
               8937,  8959,  8980,  9001,  9029,  9050,  9071,  9092,  9113,  9140,  9162,  9183,  9211,  9232,  9253,
               9274,  9295,  9323,  9344,  9365,  9367,  9357,  9333,  9311,  9289,  9268,  9239,  9218,  9197,  9176,
               9155,  9127,  9106,  9085,  9057,  9035,  9015,  8994,  8991,  9006,  9027,  9049,  9070,  9091,  9119,
               9140,  9162,  9182,  9203,  9232,  9253,  9274,  9295,  9323,  9344,  9365,  9393,  9414,  9435,  9456,
               9477,  9504,  9526,  9547,  9568,  9588,  9617,  9638,  9659,  9680,  9701,  9729,  9750,  9771,  9791,
               9812,  9841,  9862,  9883,  9904,  9932,  9953,  9974,  9995,  10016, 10044, 10065, 10086, 10107, 10128,
               10156, 10177, 10184, 10211, 10232, 10254, 10282, 10302, 10323, 10344, 10366, 10394, 10415, 10436, 10446,
               10447, 10465, 10484, 10505, 10526, 10555, 10576, 10596, 10617, 10638, 10667, 10688, 10709, 10730, 10751,
               10779, 10800, 10820, 10842, 10863, 10891, 10912, 10934, 10954, 10975, 11003, 11024, 11045, 11066, 11087,
               11115, 11136, 11157, 11178, 11200, 11228, 11248, 11270, 11271, 11277, 11297, 11317, 11345, 11366, 11388,
               11408, 11436, 11457, 11479, 11500, 11528, 11549, 11570, 11591, 11612, 11640, 11661, 11682, 11703, 11724,
               11752, 11773, 11794, 11815, 11836, 11864, 11885, 11906, 11927, 11955, 11976, 11996, 12018, 12039, 12067,
               12088, 12109, 12128, 12150, 12179, 12200, 12221, 12242, 12263, 12290, 12311, 12332, 12353, 12382, 12403,
               12424, 12444, 12465, 12494, 12515, 12536, 12564, 12574, 12567, 12552, 12532, 12503, 12481, 12460, 12438,
               12417, 12389, 12367, 12347, 12319, 12298, 12277, 12256, 12234, 12207, 12204, 12214, 12233, 12254, 12281,
               12302, 12324, 12346, 12375, 12396, 12416, 12437, 12459, 12486, 12508, 12529, 12550, 12571, 12599, 12620,
               12641, 12662, 12683, 12711, 12732, 12753, 12774, 12795, 12823, 12844, 12865, 12886, 12907, 12935, 12956,
               12984, 13005, 13026, 13046, 13068, 13096, 13117, 13138, 13159, 13180, 13207, 13228, 13249, 13270, 13291,
               13319, 13340, 13367, 13388, 13409, 13431, 13452, 13480, 13501, 13522, 13544, 13564, 13592, 13614, 13635,
               13656, 13676, 13705, 13726, 13747, 13768, 13796, 13817, 13838, 13866, 13894, 13914, 13935, 13956, 13978,
               14005, 14026, 14048, 14068, 14090, 14118, 14139, 14160, 14181, 14202, 14227, 14223, 14210, 14185, 14163,
               14140, 14119, 14098, 14070, 14049, 14028, 14006, 13978, 13956, 13935, 13914, 13893, 13867, 13858, 13858,
               13857, 13857, 13857, 13857, 13857, 13857, 13857, 13857, 13857, 13857, 13857, 13857, 13857, 13857, 13857,
               13857, 13857, 13857, 13857, 13857, 13857, 13857, 13857, 13857}),
          vertial_encoder_right_(
              {7501,  7502,  7502,  7502,  7502,  7502,  7502,  7502,  7502,  7502,  7502,  7502,  7502,  7502,  7502,
               7502,  7502,  7502,  7502,  7502,  7502,  7502,  7502,  7502,  7502,  7502,  7502,  7502,  7502,  7502,
               7504,  7514,  7532,  7553,  7574,  7602,  7623,  7644,  7665,  7687,  7715,  7736,  7757,  7778,  7799,
               7827,  7849,  7869,  7891,  7912,  7939,  7961,  7988,  8003,  8023,  8051,  8072,  8093,  8115,  8135,
               8163,  8184,  8205,  8226,  8247,  8275,  8296,  8317,  8338,  8359,  8387,  8408,  8429,  8450,  8471,
               8499,  8520,  8541,  8562,  8590,  8611,  8632,  8653,  8674,  8695,  8723,  8744,  8765,  8793,  8814,
               8835,  8856,  8877,  8905,  8926,  8947,  8968,  8989,  9017,  9038,  9059,  9080,  9101,  9129,  9150,
               9171,  9199,  9220,  9241,  9262,  9283,  9304,  9332,  9353,  9374,  9395,  9416,  9444,  9465,  9486,
               9514,  9528,  9556,  9577,  9598,  9619,  9640,  9668,  9688,  9709,  9738,  9759,  9780,  9808,  9829,
               9850,  9870,  9892,  9913,  9941,  9962,  9983,  10011, 10032, 10053, 10074, 10095, 10123, 10144, 10165,
               10186, 10206, 10235, 10256, 10277, 10297, 10319, 10347, 10368, 10389, 10417, 10438, 10459, 10480, 10508,
               10528, 10549, 10571, 10592, 10620, 10641, 10662, 10683, 10703, 10732, 10753, 10773, 10794, 10816, 10844,
               10865, 10886, 10907, 10928, 10956, 10977, 10998, 11026, 11047, 11067, 11088, 11110, 11131, 11160, 11181,
               11202, 11222, 11243, 11271, 11292, 11313, 11341, 11355, 11383, 11403, 11425, 11453, 11473, 11495, 11516,
               11537, 11565, 11586, 11607, 11635, 11656, 11677, 11698, 11719, 11740, 11768, 11789, 11810, 11831, 11852,
               11880, 11901, 11922, 11950, 11971, 11991, 12013, 12034, 12062, 12083, 12104, 12125, 12146, 12174, 12195,
               12216, 12244, 12265, 12286, 12307, 12328, 12356, 12377, 12398, 12419, 12447, 12468, 12489, 12510, 12531,
               12559, 12580, 12601, 12622, 12643, 12672, 12692, 12713, 12734, 12755, 12783, 12804, 12825, 12853, 12874,
               12895, 12916, 12937, 12958, 12986, 13007, 13028, 13049, 13070, 13098, 13119, 13147, 13168, 13189, 13210,
               13231, 13252, 13280, 13301, 13322, 13343, 13364, 13392, 13413, 13435, 13463, 13483, 13505, 13525, 13546,
               13567, 13595, 13616, 13637, 13666, 13687, 13707, 13729, 13749, 13777, 13798, 13819, 13841, 13861, 13890,
               13911, 13932, 13952, 13973, 14001, 14022, 14043, 14071, 14092, 14113, 14134, 14162, 14183, 14204, 14225,
               14246, 14274, 14295, 14316, 14337, 14357, 14386, 14407, 14427, 14448, 14470, 14498, 14519, 14540, 14561,
               14582, 14610, 14631, 14652, 14680, 14701, 14722, 14743, 14764, 14785, 14813, 14835, 14855, 14876, 14897,
               14925, 14946, 14974, 14995, 15016, 15037, 15065, 15086, 15107, 15128, 15149, 15177, 15198, 15219, 15241,
               15261, 15296, 15310, 15332, 15353, 15381, 15402, 15423, 15443, 15464, 15492, 15513, 15534, 15555, 15576,
               15605, 15625, 15646, 15667, 15688, 15716, 15737, 15759, 15779, 15800, 15828, 15850, 15871, 15898, 15912,
               15940, 15961, 15982, 16004, 16024, 16052, 16073, 16094, 16115, 16136, 16164, 16192, 16213, 16234, 16255,
               16277, 16304, 16325, 16346, 16367, 16395, 16417, 16438, 16459, 16480, 16515, 16528, 16549, 16571, 16591,
               16619, 16640, 16661, 16682, 16703, 16731, 16752, 16773, 16794, 16822, 16843, 16863, 16885, 16906, 16935,
               16955, 16976, 16996, 17017, 17046, 17067, 17088, 17116, 17129, 17156, 17178, 17199, 17220, 17248, 17269,
               17290, 17311, 17332, 17360, 17381, 17409, 17431, 17452, 17472, 17493, 17515, 17544, 17565, 17586, 17606,
               17627, 17655, 17676, 17697, 17732, 17746, 17767, 17788, 17809, 17837, 17857, 17879, 17900, 17921, 17949,
               17970, 17991, 18012, 18040, 18061, 18082, 18103, 18124, 18152, 18173, 18194, 18216, 18236, 18264, 18285,
               18307, 18334, 18348, 18376, 18397, 18418, 18439, 18460, 18488, 18509, 18530, 18551, 18572, 18600, 18628,
               18649, 18670, 18691, 18712, 18733, 18761, 18782, 18803, 18824, 18845, 18873, 18893, 18915, 18943, 18957,
               18985, 19006, 19033, 19055, 19076, 19097, 19118, 19146, 19167, 19188, 19210, 19237, 19258, 19279, 19300,
               19321, 19342, 19370, 19391, 19412, 19433, 19461, 19483, 19504, 19538, 19559, 19580, 19601, 19622, 19643,
               19671, 19693, 19713, 19734, 19756, 19783, 19804, 19825, 19853, 19867, 19895, 19916, 19937, 19965, 19987,
               20008, 20029, 20050, 20078, 20099, 20119, 20147, 20169, 20189, 20210, 20231, 20252, 20275, 20282, 20282,
               20282, 20282, 20282, 20282, 20282, 20282, 20282, 20282, 20282, 20282, 20282, 20282, 20282, 20282, 20282,
               20282, 20282, 20282, 20282, 20282, 20282, 20282, 20282, 20282}) {
        prev_left_count_ = 0;
        prev_right_count_ = 0;
    };
    void cycle();
    const Diff2OdometryState &state() const { return state_; };
    double x() { return state_.x; };
    double y() { return state_.y; };
    double theta() { return state_.theta; }
    double v() { return state_.v; };
    double w() { return state_.w; };
    int encoder_left() { return current_left_count_; };
    int encoder_right() { return current_right_count_; };

private:
    const Diff2OdometryConfig &config_;
    std::vector<int> vertial_encoder_left_;
    std::vector<int> vertial_encoder_right_;
    int index = 0;

    bool init_flag_;

    std::chrono::steady_clock::time_point prev_time_;
    Diff2OdometryState prev_state_;
    Diff2OdometryState state_;
    int current_left_count_;
    int current_right_count_;
    int prev_left_count_;
    int prev_right_count_;

    double count_to_rad_(const double count) {
        return count * (2.0 * util::pi_d / config_.encoder_count_per_revolution);
    };
    double omega_to_vel_(const double omega) { return omega * config_.wheel_radius; };
    int delta_count_(int dt_count) {
        if (abs(dt_count) >= config_.encoder_count_range / 2) {
            return util::sign(dt_count) * config_.encoder_count_range - dt_count;
        } else {
            return dt_count;
        }
    };
};

}  // namespace diff2_odometry